package main

import (
	"atlas-pos/kafka"
	"atlas-pos/logger"
	"atlas-pos/map"
	"atlas-pos/portal/script"
	"atlas-pos/portal/script/discrete"
	"atlas-pos/tracing"
	"context"
	"io"
	"os"
	"os/signal"
	"sync"
	"syscall"
)

const serviceName = "atlas-pos"
const consumerGroupId = "Portal Orchestration Service"

func main() {
	l := logger.CreateLogger(serviceName)
	l.Infoln("Starting main service.")

	wg := &sync.WaitGroup{}
	ctx, cancel := context.WithCancel(context.Background())

	tc, err := tracing.InitTracer(l)(serviceName)
	if err != nil {
		l.WithError(err).Fatal("Unable to initialize tracer.")
	}
	defer func(tc io.Closer) {
		err = tc.Close()
		if err != nil {
			l.WithError(err).Errorf("Unable to close tracer.")
		}
	}(tc)

	script.InitRegistry(
		discrete.ChristmasOut2008{},
		discrete.Advice00{},
		discrete.Advice01{},
		discrete.Advice02{},
		discrete.Advice03{},
		discrete.Advice04{},
		discrete.Advice05{},
		discrete.Advice06{},
		discrete.Advice07{},
		discrete.Advice08{},
		discrete.Advice09{},
		discrete.AdviceMap{},
		discrete.AMatchMove2{},
		discrete.Apq00{},
		discrete.Apq01{},
		discrete.Apq1{},
		discrete.Apq02{},
		discrete.Apq2{},
		discrete.Apq3{},
		discrete.ApqClosed{},
		discrete.ApqDoor{},
		discrete.AquaPQBoss0{},
		discrete.AranTutorAloneX{},
		discrete.AranTutorArrow0{},
		discrete.AranTutorArrow1{},
		discrete.AranTutorArrow2{},
		discrete.AranTutorArrow3{},
		discrete.AranTutorGuide0{},
		discrete.AranTutorGuide1{},
		discrete.AranTutorGuide2{},
		discrete.AranTutorLost{},
		discrete.AranTutorMono0{},
		discrete.AranTutorMono1{},
		discrete.AranTutorMono2{},
		discrete.AranTutorMono3{},
		discrete.AranTutorOut1{},
		discrete.AranTutorOut2{},
		discrete.AranTutorOut3{},
		discrete.AriantAgit{},
		discrete.AriantCastle{},
		discrete.AriantQueens{},
		discrete.AriantMount{},
		discrete.AriantMount2{},
		discrete.BabyPigOut{},
		discrete.BalogEnd{},
		discrete.BalogTemple{},
		discrete.BedroomOut{},
		discrete.CannonTuto06{},
		discrete.CannonTuto07{},
		discrete.CannonTuto09{},
		discrete.CannonTuto10{},
		discrete.CaptinsG00{},
		discrete.CatPriestMap{},
		discrete.ContactDragon{},
		discrete.CurseForest{},
		discrete.Davy2Hd1{},
		discrete.Davy3Hd1{},
		discrete.DavyNext0{},
		discrete.DavyNext1{},
		discrete.DavyNext2{},
		discrete.DavyNext3{},
		discrete.DavyNext4{},
		discrete.DepartGoBack00{},
		discrete.DepartGoBack01{},
		discrete.DepartGoFoward0{},
		discrete.DepartGoFoward1{},
		discrete.DepartToKerning{},
		discrete.DepartTopFloor{},
		discrete.DepartTopOut{},
		discrete.DojangExit{},
		discrete.DojangNext{},
		discrete.DojangTuto{},
		discrete.DojangUp{},
		discrete.Dracoout{},
		discrete.DragonEggNotice{},
		discrete.DragonEyes{},
		discrete.DragonNest{},
		discrete.EBoat1{},
		discrete.EBoat2{},
		discrete.Elevator{},
		discrete.ElizaGarden{},
		discrete.EndCow{},
		discrete.EnterEarth00{},
		discrete.EnterEarth01{},
		discrete.EnterNautil{},
		discrete.EnterTd{},
		discrete.EnterAchter{},
		discrete.EnterBackStreet{},
		discrete.EnterDisguise0{},
		discrete.EnterDisguise1{},
		discrete.EnterDisguise2{},
		discrete.EnterDisguise3{},
		discrete.EnterDisguise4{},
		discrete.EnterDisguise5{},
		discrete.EnterDollcave{},
		discrete.EnterDollWay{},
		discrete.EnterEvanRoom{},
		discrete.EnterFirstDH{},
		discrete.EnterFourthDH{},
		discrete.EnterGym{},
		discrete.EnterInfo{},
		discrete.EnterMagiclibrar{},
		discrete.EnterMCave{},
		discrete.EnterNepenthes{},
		discrete.EnterPort{},
		discrete.EnterRider{},
		discrete.EnterRienFirst{},
		discrete.EnterSecondDH{},
		discrete.EnterThirdDH{},
		discrete.EnterTraining{},
		discrete.EnterWarehouse{},
		discrete.EnterWitch{},
		discrete.EvanEntrance{},
		discrete.EvanFall{},
		discrete.EvanFarmCT{},
		discrete.EvanGarden0{},
		discrete.EvanGarden1{},
		discrete.EvanLivingRoom{},
		discrete.EvanRoom0{},
		discrete.EvanRoom1{},
		discrete.EvanTalk00{},
		discrete.EvanTalk01{},
		discrete.EvanTalk02{},
		discrete.EvanTalk10{},
		discrete.EvanTalk11{},
		discrete.EvanTalk20{},
		discrete.EvanTalk21{},
		discrete.EvanTalk40{},
		discrete.EvanTalk41{},
		discrete.EvanTalk42{},
		discrete.EvanTalk50{},
		discrete.EvanTalk60{},
		discrete.ExitPuppeteer{},
		discrete.Female00{},
		discrete.FoxLaidyMap{},
		discrete.GagaSuccess{},
		discrete.Gendergo{},
		discrete.GhostGateOpen{},
		discrete.GlpqEnter{},
		discrete.GlpqPortal0{},
		discrete.GlpqPortal00{},
		discrete.GlpqPortal1{},
		discrete.GlpqPortal01{},
		discrete.GlpqPortal2{},
		discrete.GlpqPortal02{},
		discrete.GlpqPortal3{},
		discrete.GlpqPortal03{},
		discrete.GlpqPortal4{},
		discrete.GlpqPortal04{},
		discrete.GlpqPortal5{},
		discrete.GlpqPortal6{},
		discrete.GlpqPortal7{},
		discrete.GlpqPortalDummy{},
		discrete.GlTutoMsg0{},
		discrete.GoSecretRoom{},
		discrete.GotoCastle{},
		discrete.Gryphius{},
		discrete.Guild1F00{},
		discrete.Guild1F01{},
		discrete.Guild1F02{},
		discrete.Guild1F03{},
		discrete.Guild1F04{},
		discrete.GuildWaitingEnter{},
		discrete.GuildWaitingExit{},
		discrete.GuyFawkes0Esc{},
		discrete.GuyFawkes0Floor{},
		discrete.HalloweenEnter{},
		discrete.HalloweenOmni1{},
		discrete.HighPosition{},
		discrete.HorntaleBOpen{},
		discrete.HorntaleBR{},
		discrete.HorntaleC{},
		discrete.HorntaleMorph2{},
		discrete.HorntaleOut1{},
		discrete.InXmasParty{},
		discrete.InDragonEgg{},
		discrete.InERShip{},
		discrete.InfoAttack{},
		discrete.InfoMiniMap{},
		discrete.InfoPickup{},
		discrete.InfoReactor{},
		discrete.InfoSkill{},
		discrete.InfoWorldMap{},
		discrete.InNix1{},
		discrete.InNix2{},
		discrete.JailIn{},
		discrete.JailOut{},
		discrete.Jnr1Out{},
		discrete.Jnr1Pt00{},
		discrete.Jnr2Out{},
		discrete.Jnr3In0{},
		discrete.Jnr3In1{},
		discrete.Jnr3Out{},
		discrete.Jnr4R1{},
		discrete.Jnr4R2{},
		discrete.Jnr4R3{},
		discrete.Jnr4R4{},
		discrete.Jnr5Rp{},
		discrete.Jnr6Out{},
		discrete.Jnr12In{},
		discrete.Jnr2010{},
		discrete.Jnr202{},
		discrete.JnrExit{},
		discrete.KingGate2Open{},
		discrete.KingGateOpen{},
		discrete.Kpq0{},
		discrete.Kpq1{},
		discrete.Kpq2{},
		discrete.Kpq3{},
		discrete.Kpq4{},
		discrete.LionCastleEnter{},
		discrete.Lpq0{},
		discrete.Lpq1{},
		discrete.Lpq2{},
		discrete.Lpq3{},
		discrete.Lpq4{},
		discrete.Lpq5{},
		discrete.Lpq6{},
		discrete.Lpq7{},
		discrete.MagatiaAlc0{},
		discrete.MagatiaDark0{},
		discrete.Male00{},
		discrete.MapleMarket7Out{},
		discrete.Market00{},
		discrete.Market01{},
		discrete.Market02{},
		discrete.Market03{},
		discrete.Market04{},
		discrete.Market05{},
		discrete.Market06{},
		discrete.Market07{},
		discrete.Market08{},
		discrete.Market09{},
		discrete.Market10{},
		discrete.Market11{},
		discrete.Market12{},
		discrete.Market13{},
		discrete.Market14{},
		discrete.Market15{},
		discrete.Market16{},
		discrete.Market17{},
		discrete.Market18{},
		discrete.Market19{},
		discrete.Market20{},
		discrete.Market21{},
		discrete.Market22{},
		discrete.Market23{},
		discrete.Market24{},
		discrete.Market26{},
		discrete.Market52{},
		discrete.Market53{},
		discrete.Market54{},
		discrete.Market55{},
		discrete.Market56{},
		discrete.MasteriaB11{},
		discrete.MasteriaB21{},
		discrete.MasteriaB31{},
		discrete.MasteriaCC1A{},
		discrete.MasteriaCC6A{},
		discrete.MasteriaCM1A{},
		discrete.MasteriaCM1B{},
		discrete.MasteriaCM1C{},
		discrete.MasteriaCM1D{},
		discrete.MasteriaCM2B{},
		discrete.MasteriaCM2C{},
		discrete.MasteriaCM2D{},
		discrete.MasteriaCM2E{},
		discrete.MasteriaU21{},
		discrete.MasteriaU31{},
		discrete.MasteriaU51{},
		discrete.MasteriaU52{},
		discrete.MasteriaU61{},
		discrete.Mayong{},
		discrete.MC2Revive{},
		discrete.McOut{},
		discrete.MCRevive1{},
		discrete.MCRevive2{},
		discrete.MCRevive3{},
		discrete.MCRevive4{},
		discrete.MCRevive5{},
		discrete.MCRevive6{},
		discrete.MDCakeEnter{},
		discrete.MDDrakeRoom{},
		discrete.MDError{},
		discrete.MDGolem{},
		discrete.MDHigh{},
		discrete.MDMushroom{},
		discrete.MDPig{},
		discrete.MDProtect{},
		discrete.MDRabbit{},
		discrete.MDRemember{},
		discrete.MDRoundTable{},
		discrete.MDSand{},
		discrete.MDTreasure{},
		discrete.MetIn{},
		discrete.MetOut{},
		discrete.MetalGateOpen{},
		discrete.MetroChat00{},
		discrete.MetroIn00{},
		discrete.MinrarElli{},
		discrete.MinrarJob4{},
		discrete.MirTalk00{},
		discrete.MirTalk01{},
		discrete.MoveElin{},
		discrete.MoveBefore{},
		discrete.MoveNext{},
		discrete.NetsIn{},
		discrete.NetsOut{},
		discrete.NextMap{},
		discrete.OBoat1{},
		discrete.OBoat2{},
		discrete.Obstacle{},
		discrete.OutPepeKing{},
		discrete.OutArchterMap{},
		discrete.OutChild{},
		discrete.OutDarkEreb{},
		discrete.OutMagicLib{},
		discrete.OutMaha{},
		discrete.OutNix1{},
		discrete.OutNix2{},
		discrete.OutPerrion1{},
		discrete.OutPerrion2{},
		discrete.OutRider{},
		discrete.OutSpecialSchool{},
		discrete.OutTemple{},
		discrete.OutTestWolf{},
		discrete.Party3GardenIn{},
		discrete.Party3Jail1{},
		discrete.Party3Jail2{},
		discrete.Party3Jail3{},
		discrete.Party3JailIn{},
		discrete.Party3R4pt{},
		discrete.Party3R4pt1{},
		discrete.Party3R6pt{},
		discrete.Party3Room1{},
		discrete.Party3Room2{},
		discrete.Party3Room3{},
		discrete.Party3Room4{},
		discrete.Party3Room5{},
		discrete.Party3Room6{},
		discrete.Party3Room8{},
		discrete.Party3RoomOut{},
		discrete.Party6Out{},
		discrete.Party6Stage{},
		discrete.Party6Stage501{},
		discrete.Party6Stage502{},
		discrete.Party6Stage503{},
		discrete.Party6Stage504{},
		discrete.Party6Stage505{},
		discrete.Party6Stage506{},
		discrete.Party6Stage507{},
		discrete.Party6Stage508{},
		discrete.Party6Stage509{},
		discrete.Party6Stage510{},
		discrete.Party6Stage511{},
		discrete.Party6Stage512{},
		discrete.Party6Stage513{},
		discrete.Party6Stage514{},
		discrete.Party6Stage515{},
		discrete.Party6Stage800{},
		discrete.Pianus{},
		discrete.Pinkin{},
		discrete.Populatus00{},
		discrete.PPinkOut{},
		discrete.Q2073{},
		discrete.Q3366In{},
		discrete.Q3366Out{},
		discrete.Q3367In{},
		discrete.Q3367Out{},
		discrete.Q3368In{},
		discrete.Q3368Out{},
		discrete.RaidRest{},
		discrete.RaidStage{},
		discrete.RankRoom{},
		discrete.ReundoDraco{},
		discrete.RienCaveEnter{},
		discrete.RienTutor1{},
		discrete.RienTutor2{},
		discrete.RienTutor3{},
		discrete.RienTutor4{},
		discrete.RienTutor5{},
		discrete.RienTutor6{},
		discrete.RienTutor7{},
		discrete.RienTutor8{},
		discrete.Rnj1Out{},
		discrete.Rnj1Pt00{},
		discrete.Rnj2Out{},
		discrete.Rnj3In0{},
		discrete.Rnj3In1{},
		discrete.Rnj3Out{},
		discrete.Rnj4R1{},
		discrete.Rnj4R2{},
		discrete.Rnj4R3{},
		discrete.Rnj4R4{},
		discrete.Rnj5Rp{},
		discrete.Rnj6Out{},
		discrete.Rnj12In{},
		discrete.Rnj2010{},
		discrete.Rnj202{},
		discrete.RnjExit{},
		discrete.S4Berserk{},
		discrete.S4BerserkMove{},
		discrete.S4Common1Exit{},
		discrete.S4FireHawk{},
		discrete.S4Hitman{},
		discrete.S4IceEagle{},
		discrete.S4MindEnd{},
		discrete.S4Nest{},
		discrete.S4ResurEnter{},
		discrete.S4ResurOut{},
		discrete.S4Resurrection{},
		discrete.S4Rush{},
		discrete.S4ShipOut{},
		discrete.S4SuperOut{},
		discrete.S4TornadoEnter{},
		discrete.SecretDoor{},
		discrete.SecretGate1Open{},
		discrete.SecretGate2Open{},
		discrete.SecretGate3Open{},
		discrete.Skyrom{},
		discrete.SpaceReturn{},
		discrete.SpaceGagaOut0{},
		discrete.SpaceGagaOut1{},
		discrete.SpaceGagaOut2{},
		discrete.SpaceGagaOut3{},
		discrete.SpearGateOpen{},
		discrete.StageBogo{},
		discrete.StatueGateOpen{},
		discrete.StoneGateOpen{},
		discrete.SubwayIn2{},
		discrete.TamePigOut2{},
		discrete.TDBossEnter{},
		discrete.TDChatEnter{},
		discrete.TDMCEGate{},
		discrete.TDMCEnterBoss1{},
		discrete.TDMCEnterBoss2{},
		discrete.TDMCFirst{},
		discrete.TDMCJump{},
		discrete.TDNeoInTree{},
		discrete.TempleEnter{},
		discrete.ThiefIn1{},
		discrete.TimeQuest{},
		discrete.TristanEnter{},
		discrete.TutoChatNPC{},
		discrete.TutorHelper{},
		discrete.TutorialNPC{},
		discrete.TutorMiniMap{},
		discrete.TutorQuest{},
		discrete.Under30Gate{},
		discrete.UndoDraco{},
		discrete.UndoDraco{},
		discrete.WaterGateOpen{},
		discrete.Zakum03{},
		discrete.Zakum05{},
	)

	kafka.CreateConsumers(l, ctx, wg,
		_map.EnterPortalConsumer(consumerGroupId))

	// trap sigterm or interrupt and gracefully shutdown the server
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, os.Kill, syscall.SIGTERM)

	// Block until a signal is received.
	sig := <-c
	l.Infof("Initiating shutdown with signal %s.", sig)
	cancel()
	wg.Wait()
	l.Infoln("Service shutdown.")
}
